---
title: New Relic Metrics Adapter
---
<Callout title="Beta Feature">
This feature is still in development, but we encourage you to try it out!
</Callout>

New Relic supports the use of metrics from your New Relic account to autoscale applications and services in your Kubernetes cluster by deploying the [New Relic Metrics Adapter][1] which fetches the metrics values from New Relic and makes them available for the [Horizontal Pod Autoscalers][2].

The [newrelic-k8s-metrics-adapter][1] implements the `external.metrics.k8s.io` API to support the use of external metrics based New Relic NRQL queries results. Once deployed the value for each configured metric is fetched using the [NerdGraph API](https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/) based on the configured [NRQL](https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/) query. The metrics adapter exposed the metrics over a secured endpoint with TLS.

![Diagram showing the newrelic metrics adapter in a cluster](./images/adapter-diagram.svg "Diagram showing the newrelic metrics adapter in a cluster")

## Requirements [#requirements]

- Kubernetes 1.16 or higher.
- New Relic [Personal API key][3].
- No other External Metrics Adapter installed in the cluster.

## Installation [#installation]

<Callout variant="tip">
The following steps are for a default setup. Before completing these, we suggest you take a look at the [Configuration](#configuration) section below to see if you want to modify any aspects adapter.
</Callout>

In order to install the New Relic Metrics Adapter we provide the newrelic-k8s-metrics-adapter Helm chart which is also included in the nri-bundle chart used to deploy the hole New Relic Kubernetes components.

Either you have followed the [automated installer](https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/#installer) or the [manual helm installation](/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm/#install-k8-helm) you should have a command line similar to the one below which but with some extra parameters to deploy and add a metric to the adapter, and in this example adding an external metric:

```
helm upgrade --install newrelic newrelic/nri-bundle \
--namespace newrelic --create-namespace \
--set global.licenseKey=<var>YOUR_NEW_RELIC_LICENSE_KEY</var> \
--set global.cluster=K8S_CLUSTER_NAME \
--set infrastructure.enabled=true \
--set prometheus.enabled=true \
--set webhook.enabled=true \
--set ksm.enabled=true \
--set kubeEvents.enabled=true \
<var>--set metrics-adapter.enabled=true</var> \
<var>--set newrelic-k8s-metrics-adapter.personalAPIKey</var>=<var>YOUR_NEW_RELIC_PERSONAL_API_KEY</var> \
<var>--set newrelic-k8s-metrics-adapter.config.accountID</var>=<var>YOUR_NEW_RELIC_ACCOUNT_ID</var> \
<var>--set newrelic-k8s-metrics-adapter.config.externalMetrics</var>.<var>external_metric_name</var>.query=<var>NRQL query</var> 
```

Please notice and adjust the following flags:
- `metrics-adapter.enabled`: Must be set to `true` so the metrics adapter chart is installed.
- `newrelic-k8s-metrics-adapter.personalAPIKey`: Must be set to valid New Relic [Personal API key][3].
- `newrelic-k8s-metrics-adapter.accountID`: Must be set to valid New Relic account where metrics are going to be fetched from.
- `newrelic-k8s-metrics-adapter.config.externalMetrics.<var>external_metric_name</var>.<var>query</var>`: This parameter adds a new external metric where:
  - `<var>external_metric_name</var>`: Is the metric name.
  - `<var>query</var>`: Is the base NRQL query that is used to get the value for the metric.


An alternative to the above command line is to use a `values.yaml` file that can be passed to the helm command with the `--values` flag.
Values files can contain all parameters needed to configure the metrics adapter explained in the [configuration](#configuration) section.

## Configuration [#configuration]

You can configure multiple metrics in the metrics adapter and change some parameters to modify the behaviour of the metrics cache and filtering.

To see the full list and descriptions of all parameters that can be modified please refer to the chart [README.md](https://github.com/newrelic/helm-charts/blob/master/charts/newrelic-k8s-metrics-adapter/README.md) and [values.yaml](https://github.com/newrelic/helm-charts/blob/master/charts/newrelic-k8s-metrics-adapter/values.yaml).

## How it works [#how-it-works]

Based on the following values enabling the metrics adapter on the nri-bundle chart installation:

```yaml
metrics-adapter:
  enabled: true
newrelic-k8s-metrics-adapter:
  personalAPIKey: <Personal API Key>
  config:
    accountID: <Account ID>
    externalMetrics:
      nginx_average_requests:
        query: "FROM Metric SELECT average(nginx.server.net.requestsPerSecond) SINCE 2 MINUTES AGO"
```

<Callout variant="caution">
Default time span for metrics is 1h so is important that whenever you define queries use the SINCE clause to adjust the time span according to your environment and needs.
</Callout>

And there is an HPA consuming the external metric like this

```yaml
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  name: nginx-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: External
      external:
        metric:
          name: nginx_average_requests
          selector:
            matchLabels: 
              k8s.namespaceName: nginx
        target:
          type: Value 
          value: 10000
```

Based on the HPA definition the controller manager fetches the metrics from the external metrics API which are served by the New Relic metrics adapter.

The New Relic metrics adapter receives the query that includes the metric name `nginx_average_requests` and all the selectors, and looks up a matching metric name in the internal memory based on the configured metrics. Then it adds the selectors to the query to form a final query that is executed using NerdGraph to fetch the value from New Relic. The above example will generate a query like the following:

```sql
FROM Metric SELECT average(nginx.server.net.requestsPerSecond) WHERE clusterName=<clusterName> AND `k8s.namespaceName`='nginx' SINCE 2 MINUTES AGO
```

Notice that a `clusterName` filter has been automatically added to the query to exclude metrics from other clusters in the same account. This can be removed by using the `removeClusterFilter` config parameter. Also the value will be cached for a period of time defined by the `cacheTTLSeconds` config parameter (which is 30s by default).


## Troubleshooting [#troubleshooting]

<CollapserGroup>
  <Collapser
    className="freq-link"
    id="verbose-helm"
    title="Get verbose logs"
  >
  Most common errors are displayed in the standard (non-verbose) logs. If you're doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode.

    <Callout variant="caution">
      Verbose mode significantly increases the amount of info sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished.
    </Callout>
  To get verbose logging details for an integration using Helm:

    1. Enable verbose logging:
    ```
    helm upgrade -n <namespace> --reuse-values newrelic-bundle --set newrelic-k8s-metrics-adapter.verboseLog=true newrelic/nri-bundle
    ```
    2. Leave on verbose mode for a few minutes, or until enough activity has occurred.
    3. When you have the information you need, disable verbose logging:
        ```
        helm upgrade --reuse-values newrelic-bundle --set newrelic-k8s-metrics-adapter.verboseLog=false newrelic/nri-bundle
        ```

  </Collapser>
  <Collapser
    className="freq-link"
    id="verbose-helm"
    title="Get raw metrics"
  >
  Sometimes is useful to get the list of available metrics and also to get the current value of an specific metric.

  To get the list of metrics available run:

  `kubectl get --raw "/apis/external.metrics.k8s.io/v1beta1/"` 

  To get the value for an specific metric with a selector run:

  `kubectl get --raw "/apis/external.metrics.k8s.io/v1beta1/namespaces/*/<metric_name>?labelSelector=<selector_key>=<selector_value>"`

  where `<metric_name>`, `<selector_key>` and `<selector_value>` should be replaced for the needed values.

  </Collapser>
  <Collapser
    className="freq-link"
    id="verbose-helm"
    title="Metrics not working"
  >
  There are some usual errors that could cause a metric fail to retrieve the value. This errors are showed in the status of the metrics when you describe the HPA or are printed when you get the raw metrics directly.

  - `executing query: NRQL Syntax Error: Error at line...` This error can present if the query that is being run has syntax errors. The same error message gives you the executed query and position of the error. You can try this query inside the New Relic query builder and correct the configuration from the adapter.
  - `extracting return value: expected first value to be of type "float64", got %!q(<nil>)` This error happens if the query doesn't return any value. The same error message gives you the executed query so you can try this query inside the New Relic query builder and correct the configuration from the adapter or the match selectors in the HPA.


  </Collapser>
</CollapserGroup>


[1]: https://github.com/newrelic/newrelic-k8s-metrics-adapter
[2]: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
[3]: https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/#user-api-key